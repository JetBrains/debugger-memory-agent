plugins {
    id 'java'
    id "com.jfrog.bintray" version "1.8.4"
    id 'maven-publish'
}

targetCompatibility = 1.6

group 'org.jetbrains.intellij.deps'

if (project.hasProperty("teamcity"))
    version = "1.0." + teamcity['build.number']
else
    version = "1.0-SNAPSHOT"


sourceSets {
    main.java.srcDirs = []
}

def binariesPath = "$projectDir/../bin"
def proxyPath = "$projectDir/../classes/IdeaNativeAgentProxy.class"

static def checkBinaries(String binPath) {
    def expectedFiles = ['libmemory_agent.dylib', 'libmemory_agent.so', 'memory_agent.dll', 'memory_agent32.dll']
    expectedFiles.collect { new File(binPath, it) }.each { file ->
        if (!file.exists()) {
            throw new GradleException("Binary dependency not found: ${file.path}")
        }
    }
}


task includeBinaries {
    doFirst {
        checkBinaries(binariesPath)
    }
    outputs.files files(binariesPath)
}

task includeClasses {
    doFirst {
        if (!new File(proxyPath).exists()) {
            throw new GradleScriptException("Agent proxy not found")
        }
    }

    outputs.files files(proxyPath)
}

jar {
    into('bin') {
        from includeBinaries
    }
    into('proxy') {
        from includeClasses
    }
}
task sourceJar(type: Jar) {
    from file("$projectDir/../src")
    from file("$projectDir/../test_data/proxy/src")
    classifier 'sources'
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId mvnGroupId
            artifactId mvnArtifactId
            artifact sourceJar
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    publish = true

    pkg {
        repo = bintrayRepoName
        name = bintrayPkgName
        userOrg = bintrayUserOrg
        version.name = version
    }

    publications = ['MyPublication']
}